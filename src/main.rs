use eyre::Result;
use std::env;
use std::process;

use evm_simulator;

/// In Ethereum, transactions must be signed with a private key before they can be broadcast to the
/// network. Ethers-rs provides a way to customize this process by allowing
/// you to define a signer, called to sign transactions before they are sent.
// #[tokio::main]
// async fn main() -> Result<()> {
//     let args = return_eip20_test_case();
//         let simulation_params = evm_simulator::SimulationParams::new(&args)?;

//         println!("\n {:?}", simulation_params);

//         let sim_result_result = evm_simulator::simulate(simulation_params).await;
//         let _ = match sim_result_result {
//             Ok(sim_result) => evm_simulator::print_result(sim_result),
//             Err(sim_error) => {
//                 eprintln!("{:?}", sim_error);
//                 process::exit(1);
//             }
//         };

//         let args = return_eip721_test_case();
//         let simulation_params = evm_simulator::SimulationParams::new(&args)?;

//         println!("\n {:?}", simulation_params);

//         let sim_result_result = evm_simulator::simulate(simulation_params).await;
//         let _ = match sim_result_result {
//             Ok(sim_result) => evm_simulator::print_result(sim_result),
//             Err(sim_error) => {
//                 eprintln!("{:?}", sim_error);
//                 process::exit(1);
//             }
//         };

//         Ok(())

//     Ok(())
// }

#[tokio::main]
async fn main() -> Result<()> {
    let args: Vec<String> = env::args().collect();
    let simulation_params = evm_simulator::SimulationParams::new(&args).unwrap_or_else(|e| {
        eprintln!("{}", e);
        process::exit(1);
    });

    println!("\n {:?}", simulation_params);

    let sim_result = evm_simulator::simulate(simulation_params).await?;
    let _ = evm_simulator::print_result(sim_result);

    Ok(())
}

#[cfg(test)]
mod test {
    use super::*;

    // test runs
    fn return_eip20_test_case() -> Vec<String> {
        // return a uniswap swap tx data

        let path = "path".to_owned();
        let from = "0x448E0F9F42746F6165Dbe6E7B77149bB0F631E6E".to_owned();
        let to = "0x2Ec705D306b51e486B1bC0D6ebEE708E0661ADd1".to_owned();
        let data = "0x18cbafe500000000000000000000000000000000000000000000000000394425252270000000000000000000000000000000000000000000000000000035e2b98723e13d00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000448e0f9f42746f6165dbe6e7b77149bb0f631e6e0000000000000000000000000000000000000000000000000000000064a876b70000000000000000000000000000000000000000000000000000000000000002000000000000000000000000e30bbec87855c8710729e6b8384ef9783c76379c000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2".to_owned();
        let value = "0".to_owned();
        let block_number = "17644319".to_owned();

        vec![path, from, to, data, value, block_number]
    }

    fn return_eip721_test_case() -> Vec<String> {
        // return an erc1155 and erc20 tx

        let path = "path".to_owned();
        let from = "0x77c5D44F392DD825A073C417EDe8C2f8bce603F6".to_owned();
        let to = "0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC".to_owned();
        let data = "0xe7acab24000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000005e00000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000004c00000000000000000000000000b818dc9d41732617dfc5bc8dff03dac632780e1000000000000000000000000000000e7ec00e7b300774b00001314b8610022b80000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000064ac23690000000000000000000000000000000000000000000000000000000064d501e50000000000000000000000000000000000000000000000000000000000000000360c6ebe0000000000000000000000000000000000000000710e918d59930ae50000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d529ae9e86000000000000000000000000000000000000000000000000000000d529ae9e8600000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000076be3b62873462d2142405439777e971754e8e77000000000000000000000000000000000000000000000000000000000000282c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000b818dc9d41732617dfc5bc8dff03dac632780e10000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005543df729c0000000000000000000000000000000000000000000000000000005543df729c0000000000000000000000000000000a26b00c1f0df003000390027140000faa719000000000000000000000000000000000000000000000000000000000000004059577c8e8707f9b8896a85d4a59a2ef30647fb061287f000079b9fe1e5063474597f9bf2b77700bba355bd813f416da1c12048c8b976a222a3fcdbc92a7887aa000000000000000000000000000000000000000000000000000000000000007e0077c5d44f392dd825a073c417ede8c2f8bce603f60000000064add71eaab1b624b2bf2ba4bc33225f4eb7638e22f73aca43287493a1f63311f6c038a5d8ca9631edb8f32f3696d78963d536359f05834d595295a3189b2c0862236f6900000000000000000000000000000000000000000000000000000000000000282c0000000000000000000000000000000000000000000000000000000000000000000000000000360c6ebe".to_owned();
        let value = "0".to_owned();
        let block_number = "17673303".to_owned();

        vec![path, from, to, data, value, block_number]
    }

    #[tokio::test]
    async fn it_works() -> Result<(), String> {
        let args = return_eip20_test_case();
        let simulation_params = evm_simulator::SimulationParams::new(&args)?;

        println!("\n {:?}", simulation_params);

        let sim_result_result = evm_simulator::simulate(simulation_params).await;
        let _ = match sim_result_result {
            Ok(sim_result) => evm_simulator::print_result(sim_result),
            Err(sim_error) => {
                eprintln!("{:?}", sim_error);
                process::exit(1);
            }
        };

        let args = return_eip721_test_case();
        let simulation_params = evm_simulator::SimulationParams::new(&args)?;

        println!("\n {:?}", simulation_params);

        let sim_result_result = evm_simulator::simulate(simulation_params).await;
        let _ = match sim_result_result {
            Ok(sim_result) => evm_simulator::print_result(sim_result),
            Err(sim_error) => {
                eprintln!("{:?}", sim_error);
                process::exit(1);
            }
        };

        Ok(())
    }
}
